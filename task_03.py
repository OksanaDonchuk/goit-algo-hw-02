def check_brackets(user_string: str) -> str:
    """
    Перевіряє, чи є дужки у вхідному рядку симетричними.

    Аргументи:
    user_string (str): Рядок, який містить дужки.

    Повертає:
    str: "Симетрично", якщо дужки правильно закриті, або "Несиметрично", якщо ні.
    """
    # Стек для зберігання відкритих дужок
    stack = []
    
    # Словник відповідних пар дужок
    brackets = {')': '(', ']': '[', '}': '{'}

    # Перебір кожного символу у рядку
    for char in user_string:
        # Якщо це відкрита дужка, додаємо її в стек
        if char in brackets.values():
            stack.append(char)
        # Якщо це закрита дужка
        elif char in brackets.keys():
            # Перевіряємо чи є відкриті дужки в стеку та чи співпадає остання відкрита дужка
            if stack and stack[-1] == brackets[char]:
                stack.pop()  # Якщо пара правильна, видаляємо зі стека
            else:
                return "Несиметрично"  # Якщо ні, то дужки несиметричні

    # Якщо стек порожній після перевірки — всі дужки симетричні
    return "Симетрично" if not stack else "Несиметрично"


# Приклади використання
examples = [
    "( ){[ 1 ]( 1 + 3 )( ){ }}",  # Симетрично
    "( 23 ( 2 - 3);",            # Несиметрично
    "( 11 }",                    # Несиметрично
    "({[]})",                    # Симетрично
    "[ { ( ) } ]",               # Симетрично
    "( ) { [ } ]",               # Несиметрично
]

for example in examples:
    print(f"'{example}': {check_brackets(example)}")